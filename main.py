import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from inline_keyboards import ikb_file, ikb_cancel, get_inline_keybord_for_edit, ikb_edit_menu,ikb_files,ikb_add_delete_files, get_files_from_disk
from config import BOT_TOKEN
from keyboards import kb_start
from aiogram_calendar import simple_cal_callback, SimpleCalendar
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from sqlite import create_project, db_start, edit_project, get_state_of_task, edit_state_of_task, get_done_tasks, \
    get_not_done_tasks,edit_task_description, delete_my_task,edit_task_time, get_awaiting_tasks, replace_await_by_send, select_date_task_for_periodic,\
    update_date_task_for_pereodic, get_periodic_state, update_pereodic_of_task_yes,update_pereodic_of_task_no, get_users
from upload_google_drive import another_way, upload_file_on_drive, delete_files_from_google_disk
from scripts import check_for_notification, add_days
import aioschedule
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import uvicorn





async def on_startup(_):
    await db_start()
    # asyncio.create_task(scheduler())


Storage = MemoryStorage()
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot, storage=Storage)

START_TEXT = """
<b>–ü—Ä–∏–≤–µ—Ç! –ö —Ä–∞–±–æ—Ç–µ –≥–æ—Ç–æ–≤   </b> 

üîîÔ∏è  <b>/new</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üîàÔ∏è  <b>/current</b> - —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üîáÔ∏è  <b>/done</b> - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
‚úèÔ∏è  <b>/edit</b> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üóëÔ∏è  <b>/delete</b> - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üóÇÔ∏è  <b>/exit</b> - –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
"""
class DeleteTasks(StatesGroup):
    Delete_task = State()

class EditTasks(StatesGroup):
    Get_inline_menu = State()
    Edit_Calendar = State()
    Edit_Description = State()
    Edit_Time = State()
    Edit_Periodic = State()
    Edit_Files = State()
    Delete_Files = State()

class PlanThingsProcces(StatesGroup):
    Calendar = State()
    Description = State()
    FileName = State()
    Document = State()
    NotificationTime = State()


#–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id,
                           text = START_TEXT,
                           parse_mode = 'HTML',
                           reply_markup = kb_start)


# @dp.message_handler(commands=['new'])
# async def new(message: types.Message):
#     await bot.send_message(chat_id = message.from_user.id,
#                            text = "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
#                            parse_mode = 'HTML')

@dp.message_handler(text=['–ú–µ–Ω—é'])
async def start(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id,
                           text = START_TEXT,
                           parse_mode = 'HTML',
                           reply_markup = kb_start)


#–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
# @dp.message_handler()
async def notification_function():
    print("–∑–∞—à–µ–ª –≤ notification_function")
    #–≤—ã–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ "—Ç–µ–∫—É—â–∏–µ"
    tasks = get_awaiting_tasks()
    for task in tasks:
        print(task[1] + ' ' + task[2] + ' ' + task[3])
        #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        if check_for_notification(task[2], task[3]):
            print("–≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ")
            #–µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(chat_id=task[0], text=f"–£ –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ - {task[1]}")
            #—Ñ–ª–∞–∂–æ–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –¥–µ–ª–∞"
            if task[4] == 0:
                #–µ—Å–ª–∏ –¥–µ–ª–æ –Ω–µ –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–æ–µ —Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—É—Å "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏" –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                await replace_await_by_send(task[0], task[1])
            else:
                #–≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –¥–µ–ª
                date_culc = select_date_task_for_periodic(task[0], task[1])
                res_date = add_days(date_culc[0], date_culc[1])
                #–æ–±–Ω–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ª–∞
                await update_date_task_for_pereodic(task[0], task[1], res_date)


#–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é notification_function –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ).
# async def scheduler():
#     print("–∑–∞—à–µ–ª –≤ scheduler")
#     aioschedule.every(1).minutes.do(notification_function)
#     while True:
#         print("–∑–∞—à–µ–ª –≤ scheduler True")
#         await aioschedule.run_pending()
#         await asyncio.sleep(1)

# async def scheduler():
#     print("–∑–∞—à–µ–ª –≤ scheduler")
#     aioschedule.every(1).minutes.do(notification_function)
#     while True:
#         print("–∑–∞—à–µ–ª –≤ scheduler True")
#         await aioschedule.run_pending()
#         await asyncio.sleep(1)

#—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "—Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞"
@dp.message_handler(text=['–¢–µ–∫—É—â–∏–µ –¥–µ–ª–∞', '/current'])
async def current_tasks(message: types.Message):
    done_tasks = ""
    #–≤—ã–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –¥–µ–ª–∞, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Å–ø–∏—Å–∫–µ "—Ç–µ–∫—É—â–∏—Ö" —Ç.–µ –≤ –∫–æ–ª–æ–Ω–∫–µ done_or_not —Å—Ç–æ–∏—Ç 0
    tasks = get_done_tasks(message.from_user.id)
    num = 1
    for task in tasks:
        # done_tasks += f"<b>{num}. {task[3]}</b> - <b>{task[1]}</b>\n {task[2]}\n"
        done_tasks += f"<b>üìå  {task[3]}</b> - <b>{task[1]}</b>\n {task[2]}\n"
        num = num + 1
    await bot.send_message(message.chat.id, '<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞:</b>\n\n' + done_tasks,
                           parse_mode=types.ParseMode.HTML)

#—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞"
@dp.message_handler(text=['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞', '/done'])
async def current_tasks(message:types.Message):
    not_done_tasks = ""
    # –≤—ã–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –¥–µ–ª–∞, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Å–ø–∏—Å–∫–µ "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö" —Ç.–µ –≤ –∫–æ–ª–æ–Ω–∫–µ done_or_not —Å—Ç–æ–∏—Ç 1
    tasks = get_not_done_tasks(message.from_user.id)
    print(tasks)
    num = 1
    for task in tasks:
        # not_done_tasks += f"<b>{num}. {task[3]}</b> - <b>{task[1]}</b>\n {task[2]}\n"
        not_done_tasks += f"<b>‚úÖ  {task[3]}</b> - <b>{task[1]}</b>\n {task[2]}\n"
        num = num + 1
    await bot.send_message(message.chat.id, '<b>–í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–ª–∞:</b>\n\n' + not_done_tasks,
                           parse_mode=types.ParseMode.HTML)


#—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–¥–∞–Ω–∏—è)
@dp.message_handler(commands=['delete'])
async def delete_tasks_by_name(message: Message):
    await bot.send_message(chat_id=message.from_user.id,
                       text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                       reply_markup=get_inline_keybord_for_edit(message.from_user.id))
    await DeleteTasks.Delete_task.set()


#—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–¥–∞–Ω–∏—è)
@dp.callback_query_handler(state=DeleteTasks.Delete_task)
async def del_current_task(callbak:CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        data['name'] = callbak.data
    #—É–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞ (—ç—Ç–∞ –ø–∞—Ä–∞ –∑–∞–ø–∏—Å–µ–π —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–º)
    await delete_my_task(state,callbak.from_user.id)
    await bot.send_message(chat_id=callbak.from_user.id, text = '‚úÖ  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
    await state.finish()



#—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(commands=['exit'], state = EditTasks.Get_inline_menu)
async def exit_to_menu(message: Message, state: FSMContext)->None:
    await message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é')
    await state.finish()


#–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–æ
@dp.message_handler(text=['–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '/new'])
async def plan_some_things(message: types.Message, state: FSMContext)->None:
    await bot.send_message(chat_id = message.from_user.id,
                           text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    await PlanThingsProcces.Description.set()


#–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
@dp.message_handler(state = PlanThingsProcces.Description)
async def make_some_description(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data_dict:
        data_dict['project_name'] = message.text
        print(data_dict['project_name'])
        print(str(message.from_user.id))
        #—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫–µ –ø–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º - {user_id} –∏ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –≤ –Ω–µ—ë –ø–∞–ø–∫–∏ {–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–ª–∞}
        another_way(str(message.from_user.id), message.text)
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await PlanThingsProcces.Calendar.set()

#–∫–∞–ª–µ–Ω–¥–∞—Ä—å
@dp.message_handler(state=PlanThingsProcces.Calendar)
async def call_calendar(message: Message, state: FSMContext):
    async with state.proxy() as data_dict:
        data_dict['description'] = message.text,
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ", reply_markup=await SimpleCalendar().start_calendar())

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query_handler(simple_cal_callback.filter(), state = PlanThingsProcces.Calendar)
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict,state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    async with state.proxy() as data_dict:
        data_dict['project_date'] = date.strftime("%d/%m/%Y")
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  {date.strftime("%d/%m/%Y")}',
            reply_markup=ikb_file
        )

#–ü–µ—Ä–≤–∞—è —Å—Ç—É–ø–µ–Ω—å "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π"
@dp.message_handler(commands=['edit'])
async def edit_projects(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                           #–≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω–æ–º—É —é–∑–µ—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                           reply_markup=get_inline_keybord_for_edit(message.from_user.id))
    await EditTasks.Get_inline_menu.set()

#—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@dp.callback_query_handler(text='edit_files',state=EditTasks.Get_inline_menu)
async def edit_files_for_tasks(callback: CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                           reply_markup=ikb_add_delete_files)


#—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –≥—É–≥–ª –¥–∏—Å–∫–∞.
@dp.callback_query_handler(text='delete_files', state=EditTasks.Get_inline_menu)
async def choose_file_for_deleting(callback:CallbackQuery,state:FSMContext):
    async with state.proxy() as data:
        await bot.send_message(chat_id=callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                               reply_markup=get_files_from_disk(callback.from_user.id, data['name']))
    await EditTasks.Delete_Files.set()


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(state = EditTasks.Delete_Files)
async def delete_files_from_disk(callback:CallbackQuery, state:FSMContext):
    #—É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –ø–æ –µ–≥–æ id, id –ø–æ–ª—É—á–∞–µ–º –∏–∑ inline keyboard (—Å –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–ª–∏ –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    delete_files_from_google_disk(callback['data'])
    await bot.send_message(chat_id=callback.from_user.id, text = '‚úÖ  –§–∞–π–ª —É—Å–ø–µ–Ω–æ —É–¥–∞–ª—ë–Ω!')
    await state.finish()


#–ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫ –≤ –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–≤–æ–¥–∏—Ç—å –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º)
@dp.callback_query_handler(text='upload_new_files',state=EditTasks.Get_inline_menu)
async def upload_files(callback:CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞... –í —Ñ–æ—Ä–º–∞—Ç–µ <strong>FileName</strong>.—Ñ–æ—Ä–º–∞—Ç(txt,xlsx,...) ',
                           parse_mode='HTML')
    await EditTasks.Edit_Files.set()

#–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫
@dp.message_handler(state=EditTasks.Edit_Files)
async def uplode_new_files(message:Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª',
                           reply_markup=ikb_cancel)
    async with state.proxy() as data:
        data['file_name'] = message.text


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ upload –µ–≥–æ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫
@dp.message_handler(content_types = types.ContentTypes.DOCUMENT, state = EditTasks.Edit_Files)
async def doc_handler(message: types.Message, state: FSMContext)-> None:
    async with state.proxy() as data:
        if document := message.document:
            await document.download(
                destination_file=f"{data['file_name']}",
            )
        #—Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª filename –≤ –Ω—É–∂–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫–µ
        upload_file_on_drive(str(message.from_user.id), data['name'], data['file_name'])
    await bot.send_message(chat_id=message.from_user.id,
                           text='‚úÖ  –£—Å–ø–µ—à–Ω–æ! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω ')
    await state.finish()





#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query_handler(text='edit_description', state=EditTasks.Get_inline_menu)
async def edit_description(callback: CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await EditTasks.Edit_Description.set()


#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(text='edit_time', state=EditTasks.Get_inline_menu)
async def edit_description(callback: CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è')
    await EditTasks.Edit_Time.set()


"""–ø–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ –≤ –∫–ª–∞—Å—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö. –¢.–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, 
–≤ –≥—Ä–∞—Ñ—É —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ "send" –∞ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –¥–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ (–≤ –¥–Ω—è—Ö), —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

@dp.callback_query_handler(text='edit_periodic',state=EditTasks.Get_inline_menu)
async def edit_periodic_state(callback:CallbackQuery, state:FSMContext):
    period = await get_periodic_state(state,callback.from_user.id)
    print(period)
    if period[0] == 0:
        await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ –¥–Ω—è—Ö)')
        await EditTasks.Edit_Periodic.set()
    else:
        await update_pereodic_of_task_no(callback.from_user.id, state)
        await bot.send_message(chat_id=callback.from_user.id, text = '‚úÖ  –£—Å–ø–µ—à–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –Ω–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ')
        await state.finish()

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message_handler(state=EditTasks.Edit_Periodic)
async def set_period(message:Message,state:FSMContext):
    await update_pereodic_of_task_yes(message.from_user.id,state,int(message.text))
    await message.answer(f'‚úÖ  –£—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è = {message.text}')
    await state.finish()



#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(state=EditTasks.Edit_Time)
async def set_new_description(message: Message,state:FSMContext):
    async with state.proxy() as data:
        data['notification_time'] = message.text
    #–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await edit_task_time(state, message.from_user.id)
    await bot.send_message(chat_id=message.from_user.id,
                           text='‚úÖ  –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await EditTasks.Get_inline_menu.set()


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=EditTasks.Edit_Description)
async def set_new_description(message: Message,state:FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    #–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è description –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await edit_task_description(state, message.from_user.id)
    await bot.send_message(chat_id=message.from_user.id,
                           text='‚úÖ  –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await EditTasks.Get_inline_menu.set()

#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.callback_query_handler(text = 'edit_notice_date', state=EditTasks.Get_inline_menu)
async def edit_done_or_not(callback: CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=await SimpleCalendar().start_calendar())
    await EditTasks.Edit_Calendar.set()

"""–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–ª–∞ —Å —Ç–µ–∫—É—â–µ–µ -> –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, –≤ –≥—Ä–∞—Ñ–µ done_or_not —Å—Ç–∞–≤–∏–º –µ–¥–µ–Ω–∏—Ü—É –∏ —Å–Ω–æ—Å–∏–º –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É
                              –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ -> —Ç–µ–∫—É—â–µ–µ, –¥–∞–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
"""
@dp.callback_query_handler(text='edit_state', state=EditTasks.Get_inline_menu)
async def edit_done_station(callback: CallbackQuery,state: FSMContext)->None:
    done = await get_state_of_task(state, callback.from_user.id)
    done = int(done)
    if done == 0:
        flag = 1
        await bot.send_message(chat_id=callback.from_user.id,
                               text = '‚úÖ  –£—Å–ø–µ—à–Ω–æ! –î–µ–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.')
        await edit_state_of_task(state, callback.from_user.id, flag)
    else:
        await bot.send_message(chat_id=callback.from_user.id,
                               text='‚úÖ  –£—Å–ø–µ—à–Ω–æ! –î–µ–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.')
        flag = 0
        await edit_state_of_task(state, callback.from_user.id,flag)
    await EditTasks.Get_inline_menu.set()


#–≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å
@dp.callback_query_handler(state=EditTasks.Get_inline_menu)
async def get_edit_inline_keyboard(callback: CallbackQuery, state: FSMContext)->None:
    async with state.proxy() as data:
        data['name'] = callback['data']
    await bot.send_message(chat_id=callback.from_user.id, text = '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. \n –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ /exit',
                           reply_markup=ikb_edit_menu)


#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
@dp.callback_query_handler(simple_cal_callback.filter(), state = EditTasks.Edit_Calendar)
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict,state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    async with state.proxy() as data:
        data['date'] = date.strftime("%d/%m/%Y")
    await edit_project(state, callback_query.from_user.id)
    await bot.send_message(chat_id=callback_query.from_user.id, text = '‚úÖ  –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')
    await EditTasks.Get_inline_menu.set()


#–µ—Å–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
@dp.callback_query_handler(text = 'with_file', state = PlanThingsProcces.Calendar)
async def get_file_name(message:Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
    await PlanThingsProcces.FileName.set()


#–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ
@dp.message_handler(state = PlanThingsProcces.FileName)
async def get_file_function(message: types.Message, state:FSMContext)->None:
    await bot.send_message(chat_id=message.from_user.id,
                           text = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª',
                        reply_markup=ikb_cancel)
    async with state.proxy() as data:
        data['file_name'] = message.text
    await PlanThingsProcces.next()

#–µ—Å–ª–∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω—É–∂–Ω—ã
@dp.callback_query_handler(text = 'without_file', state=PlanThingsProcces.Calendar)
async def dont_get_file_function(message:types.Message, state = FSMContext)->None:
    await bot.send_message(chat_id=message.from_user.id,
                           text = '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM')
    await  PlanThingsProcces.NotificationTime.set()


#–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø–∏—Å—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=PlanThingsProcces.NotificationTime)
async def add_time_notification(message:Message, state: FSMContext)->None:
    async with state.proxy() as data_dict:
        data_dict['notification_time'] = message.text
    await create_project(state,message.from_user.id)
    users = get_users(message.from_user.id)
    users = list(users)
    flag = 0
    for us in users[0]:
        if us == str(message.from_user.id):
            flag = 1
    if flag == 0:
        print('dada')
        another_way('notification_bot', str(message.from_user.id))
    await message.answer(text='‚úÖ  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!')
    await state.finish()


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞
@dp.message_handler(content_types = types.ContentTypes.DOCUMENT, state = PlanThingsProcces.Document)
async def doc_handler(message: types.Message, state: FSMContext)-> None:
    print("–∑–∞—à–µ–ª doc_handler")
    async with state.proxy() as data:
        if document := message.document:
            await document.download(
                destination_file=f"{data['file_name']}",
            )
        upload_file_on_drive(str(message.from_user.id), data['project_name'], data['file_name'])
    await bot.send_message(chat_id=message.from_user.id,
                           text='‚úÖ  –£—Å–ø–µ—à–Ω–æ! –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω)',
                           reply_markup=ikb_files)

#–∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤
@dp.callback_query_handler(text='add_more_files', state=PlanThingsProcces.Document)
async def add_files(callback:CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
    await PlanThingsProcces.FileName.set()

#–∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
@dp.callback_query_handler(text='end_add_files', state=PlanThingsProcces.Document)
async def set_time(callback:CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM')
    await  PlanThingsProcces.NotificationTime.set()


#—Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query_handler(text='cancel', state=PlanThingsProcces)
async def cmd_start(message: types.Message, state: FSMContext)->None:
    await bot.send_message(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', chat_id=message.from_user.id)
    await state.finish()


# #–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
# # @dp.message_handler()
# async def notification_function():
#     print("–∑–∞—à–µ–ª –≤ notification_function")
#     #–≤—ã–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ "—Ç–µ–∫—É—â–∏–µ"
#     tasks = get_awaiting_tasks()
#     for task in tasks:
#         print(task[1] + ' ' + task[2] + ' ' + task[3])
#         #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
#         if check_for_notification(task[2], task[3]):
#             print("–≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ")
#             #–µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
#             await bot.send_message(chat_id=task[0], text=f"–£ –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ - {task[1]}")
#             #—Ñ–ª–∞–∂–æ–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –¥–µ–ª–∞"
#             if task[4] == 0:
#                 #–µ—Å–ª–∏ –¥–µ–ª–æ –Ω–µ –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–æ–µ —Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—É—Å "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏" –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
#                 await replace_await_by_send(task[0], task[1])
#             else:
#                 #–≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –¥–µ–ª
#                 date_culc = select_date_task_for_periodic(task[0], task[1])
#                 res_date = add_days(date_culc[0], date_culc[1])
#                 #–æ–±–Ω–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ª–∞
#                 await update_date_task_for_pereodic(task[0], task[1], res_date)




if __name__ == '__main__':
    # scheduler = AsyncIOScheduler()
    # scheduler.add_job(notification_function, 'interval', seconds=3)
    # scheduler.start()
    executor.start_polling(dp, skip_updates=True,
                           on_startup=on_startup)
    uvicorn.run('server:app', host='0.0.0.0', port=5000, reload=True)